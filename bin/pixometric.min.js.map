{"version":3,"sources":["../../../AppData/Roaming/npm/node_modules/pixify/node_modules/browser-pack/_prelude.js","src/core/config.js","src/core/core.js","src/helpers/array.js","src/world/chunk.js","src/world/world.js","src/index.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","pixometric","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","config","CHUNK","SIZE","HEIGHT","_world","Pixometric","stage","world","textures","textureLookup","_classCallCheck","generate","size","array","fill","generateFilled","object","generateFilledClasses","generate2D","width","height","x","generate2DFilled","y","generate2DFilledClasses","_array","ArrayHelpers","Chunk","voxels","sprites","_chunk","World","aoL","_chunk2","default","rotation","chunkX","chunkY","voxelZ","voxelY","Math","floor","voxelX","tmpX","tmpY","voxelIndex","voxelValue","spriteX","spriteY","sprite","PIXI","Sprite","addChild","destroy","generateSprites","cull","z","found","index","visible","_core","_config","_core2","_config2","_world2"],"mappings":"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","file":"pixometric.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var config = {\r\n    CHUNK: {\r\n        SIZE: 16,\r\n        HEIGHT: 16\r\n    }\r\n}\r\n\r\nexport default config; ","import World from \"../world/world\";\r\n\r\nexport default class Pixometric {\r\n    constructor(stage, world, textures, textureLookup) {\r\n        this.world = world;\r\n\r\n        // Make this global for easy access \r\n        Pixometric.stage = stage;\r\n        Pixometric.textures = textures;\r\n        Pixometric.textureLookup = textureLookup;\r\n    }\r\n}","// Optimalized filling methods\r\n// 1D\r\n\r\nexport function generate(size) {\r\n    var array;\r\n    (array = []).length = size;\r\n    return array.fill(0);\r\n}\r\n\r\nexport function generateFilled(size, object) {\r\n    var array;\r\n    (array = []).length = size;\r\n    for (var i = 0; i < size; i++) {\r\n        array[i] = object;\r\n    }\r\n    return array\r\n}\r\n\r\nexport function generateFilledClasses(size, object) {\r\n    var array;\r\n    (array = []).length = size;\r\n    for (var i = 0; i < size; i++) {\r\n        array[i] = new object;\r\n    }\r\n    return array;\r\n}\r\n\r\n// 2D\r\nexport function generate2D(width, height) {\r\n    var array;\r\n    (array = []).length = width;\r\n    for (var x = 0; x < width; x++) {\r\n        (array[x] = []).length = height;\r\n        array[x].fill(0);\r\n    }\r\n    return array;\r\n}\r\n\r\nexport function generate2DFilled(width, height, object) {\r\n    var array;\r\n    (array = []).length = width;\r\n    for (var x = 0; x < width; x++) {\r\n        (array[x] = []).length = height;\r\n        for (var y = 0; y < height; y++) {\r\n            array[x][y] = object;\r\n        }\r\n    }\r\n    return array;\r\n}\r\n\r\nexport function generate2DFilledClasses(width, height, object) {\r\n    var array;\r\n    (array = []).length = width;\r\n    for (var x = 0; x < width; x++) {\r\n        (array[x] = []).length = height;\r\n        for (var y = 0; y < height; y++) {\r\n            array[x][y] = new object;\r\n        }\r\n    }\r\n    return array;\r\n}","import * as ArrayHelpers from \"../helpers/array\";\r\n\r\n/**\r\n * \r\n * @export\r\n * @class Chunk\r\n */\r\nexport default class Chunk {\r\n    /**\r\n     * Creates an instance of Chunk.\r\n     * @param {Number} x \r\n     * @param {Number} y \r\n     * @memberof Chunk\r\n     */\r\n    constructor(x, y) {\r\n        this.voxels = ArrayHelpers.generateFilled(Pixometric.config.CHUNK.SIZE * Pixometric.config.CHUNK.SIZE * Pixometric.config.CHUNK.HEIGHT, 1);\r\n        this.sprites = [];\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}","import Chunk from \"./chunk\";\r\nimport * as ArrayHelpers from \"../helpers/array\";\r\n\r\nexport default class World {\r\n    /**\r\n     * Creates an instance of World.\r\n     * @todo Add option to disable rotation for better performance\r\n     * @todo Frustrum culling\r\n     * @todo Top-down view\r\n     * @memberof World\r\n     */\r\n    constructor() {\r\n        // Area of Interest, need to be recalculated after zooming\r\n        this.aoL = ArrayHelpers.generate2DFilledClasses(3, 3, Chunk);\r\n        \r\n        // 0 - 3\r\n        this.rotation = 3;\r\n    }\r\n\r\n    /**\r\n     * Generate PIXI sprites from Area of Interest\r\n     * @memberof World\r\n     */\r\n    generateSprites() {\r\n        // AoL Chunk x\r\n        for (var x = 0; x < this.aoL.length; x++) {\r\n            // AoL Chunk y\r\n            for (var y = 0; y < this.aoL[0].length; y++) {\r\n                // Calculate rotated real coordinates, without specific function for performance\r\n                // Thanks to tulevik.EU (http://www.indiedb.com/games/office-management-101/features/rotating-a-25d-isometric-map)\r\n                switch (this.rotation) {\r\n                    case 0:\r\n                        var chunkX = x;\r\n                        var chunkY = y;\r\n                        break;\r\n                    case 1:\r\n                        var chunkX = this.aoL.length - y - 1;\r\n                        var chunkY = x;\r\n                        break;\r\n                    case 2:\r\n                        var chunkX = this.aoL.length - x - 1;\r\n                        var chunkY = this.aoL[0].length - y - 1;\r\n                        break;\r\n                    case 3:\r\n                        var chunkX = y;\r\n                        var chunkY = this.aoL[0].length - x - 1;\r\n                }\r\n\r\n                // Voxels in current chunk\r\n                for (var i = 0; i < this.aoL[chunkX][chunkY].voxels.length; i++) {\r\n                    // Calculate position from 1d index\r\n                    var voxelZ = i % Pixometric.config.CHUNK.SIZE;\r\n                    var voxelY = (Math.floor(i / Pixometric.config.CHUNK.SIZE)) % Pixometric.config.CHUNK.SIZE;\r\n                    var voxelX = Math.floor(i / (Pixometric.config.CHUNK.SIZE * Pixometric.config.CHUNK.SIZE));\r\n\r\n                    // Calculate rotated real voxel coordinates\r\n                    // TODO: Optimize this \r\n                    switch (this.rotation) {\r\n                        case 0:\r\n                            var tmpX = voxelX;\r\n                            var tmpY = voxelY;\r\n                            break;\r\n                        case 1:\r\n                            var tmpX = Pixometric.config.CHUNK.SIZE - voxelY - 1;\r\n                            var tmpY = voxelX;\r\n                            break;\r\n                        case 2:\r\n                            var tmpX = Pixometric.config.CHUNK.SIZE - voxelX - 1;\r\n                            var tmpY = Pixometric.config.CHUNK.SIZE - voxelY - 1;\r\n                            break;\r\n                        case 3:\r\n                            var tmpX = voxelY;\r\n                            var tmpY = Pixometric.config.CHUNK.SIZE - voxelX - 1;\r\n                    }\r\n\r\n                    var voxelIndex = voxelZ + tmpY * Pixometric.config.CHUNK.SIZE + tmpX * Pixometric.config.CHUNK.SIZE * Pixometric.config.CHUNK.SIZE;\r\n\r\n                    // Get voxel block value\r\n                    var voxelValue = this.aoL[chunkX][chunkY].voxels[voxelIndex];\r\n\r\n                    // Check if current voxel is not air\r\n                    if (voxelValue != 0) {\r\n                        // Calculate sprite position\r\n                        var spriteX = ((voxelX - voxelY) + (x - y) * Pixometric.config.CHUNK.SIZE) * (32 / 2);\r\n                        var spriteY = ((voxelX + voxelY) + (x + y) * Pixometric.config.CHUNK.SIZE) * (32 / 4) - voxelZ * (32 / 2);\r\n                        \r\n                        // Create sprite from current block value\r\n                        var sprite = new PIXI.Sprite(Pixometric.textures[Pixometric.textureLookup[voxelValue - 1]]);\r\n\r\n                        // Add reference to current chunk for culling and unloading\r\n                        this.aoL[x][y].sprites[i] = sprite;\r\n\r\n                        // Set calculated values as position\r\n                        sprite.x = spriteX;\r\n                        sprite.y = spriteY;\r\n\r\n                        // Add sprite to the stage\r\n                        Pixometric.stage.addChild(sprite);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Rotate world\r\n     * @todo Optimize this\r\n     * @param {Number} rotation \r\n     * @memberof World\r\n     */\r\n    rotate(rotation) {\r\n        this.rotation = rotation;\r\n        for (var x = 0; x < this.aoL.length; x++) {\r\n            for (var y = 0; y < this.aoL[0].length; y++) {\r\n                for (var i = 0; i < this.aoL[0][0].sprites.length; i++) {\r\n                    if (this.aoL[x][y].sprites[i]) {\r\n                        this.aoL[x][y].sprites[i].destroy();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.generateSprites();\r\n    }\r\n\r\n    /**\r\n     * Cull none visible voxels (behind each other)\r\n     * \r\n     * @memberof World\r\n     */\r\n    occlusionCulling() {\r\n        // Check \"top\"\r\n        for (var chunkX = 0; chunkX < this.aoL.length; chunkX++) {\r\n            for (var chunkY = 0; chunkY < this.aoL[0].length; chunkY++) {\r\n                for (var x = 0; x < Pixometric.config.CHUNK.SIZE; x++) {\r\n                    for (var y = 0; y < Pixometric.config.CHUNK.SIZE; y++) {\r\n                        this.cull(chunkX, chunkY, x, y, Pixometric.config.CHUNK.HEIGHT - 1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Check \"left\"\r\n        for (var chunkX = 0; chunkX < this.aoL.length; chunkX++) {\r\n            for (var x = 0; x < Pixometric.config.CHUNK.SIZE; x++) {\r\n                for (var z = 0; z < Pixometric.config.CHUNK.HEIGHT - 1; z++) {\r\n                    this.cull(chunkX, this.aoL[0].length - 1, x, Pixometric.config.CHUNK.SIZE, z);\r\n                }\r\n            } \r\n        }\r\n        \r\n        // Check \"right\"\r\n        for (var chunkY = 0; chunkY < this.aoL[0].length; chunkY++) {\r\n            for (var y = 0; y < Pixometric.config.CHUNK.SIZE; y++) {\r\n                for (var z = 0; z < Pixometric.config.CHUNK.HEIGHT - 1; z++) {\r\n                    this.cull(this.aoL.length - 1, chunkY, Pixometric.config.CHUNK.SIZE - 1, y, z);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    cull(chunkX, chunkY, x, y, z) {\r\n        var found = false;\r\n\r\n        while(true) {\r\n            if (z < 0) {\r\n                break;\r\n            }\r\n\r\n            if (y < 0) {\r\n                if (chunkY - 1 < 0) {\r\n                    break;\r\n                } else {\r\n                    chunkY--;\r\n                    y = Pixometric.config.CHUNK.SIZE - 1;\r\n                }\r\n            }\r\n\r\n            if (x < 0) {\r\n                if (chunkX - 1 < 0) {\r\n                    break;\r\n                } else {\r\n                    chunkX--;\r\n                    x = Pixometric.config.CHUNK.SIZE - 1;\r\n                }\r\n            }\r\n\r\n            // Calculate 1D index\r\n            var index = z + y * Pixometric.config.CHUNK.SIZE + x * Pixometric.config.CHUNK.SIZE * Pixometric.config.CHUNK.SIZE;\r\n\r\n            if (this.aoL[chunkX][chunkY].voxels[index] != 0) {\r\n                if (found) {\r\n                    if (this.aoL[chunkX][chunkY].sprites[index]) {\r\n                        this.aoL[chunkX][chunkY].sprites[index].visible = false;\r\n                    }\r\n                } else {\r\n                    found = true;\r\n                }\r\n            }\r\n\r\n            x--;\r\n            y--;\r\n            z--;\r\n        }\r\n    }\r\n} ","import Pixometric from \"./core/core\";\r\nimport config from \"./core/config\";\r\nimport World from \"./world/world\";\r\n\r\n// Add global config to Pixometric variable\r\nPixometric.config = config;\r\nPixometric.World = World;\r\n\r\nglobal.Pixometric = Pixometric;"],"sourceRoot":"."}