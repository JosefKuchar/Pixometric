{"version":3,"sources":["../../../AppData/Roaming/npm/node_modules/pixify/node_modules/browser-pack/_prelude.js","src/core/core.js","src/helpers/array.js","src/world/chunk.js","src/world/world.js","src/index.js"],"names":[],"mappings":"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","file":"pixometric.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import World from \"../world/world\";\r\n\r\nexport default class Pixometric {\r\n    constructor(stage, world, textures, textureLookup) {\r\n        \r\n        this.world = world;\r\n\r\n        // Make this global for easy access \r\n        Pixometric.stage = stage;\r\n        Pixometric.textures = textures;\r\n        Pixometric.textureLookup = textureLookup;\r\n    }\r\n}","// Optimalized filling methods\r\n// 1D\r\n\r\nexport function generate(size) {\r\n    var array;\r\n    (array = []).length = size;\r\n    return array.fill(0);\r\n}\r\n\r\nexport function generateFilled(size, object) {\r\n    var array;\r\n    (array = []).length = size;\r\n    for (var i = 0; i < size; i++) {\r\n        array[i] = object;\r\n    }\r\n    return array\r\n}\r\n\r\nexport function generateFilledClasses(size, object) {\r\n    var array;\r\n    (array = []).length = size;\r\n    for (var i = 0; i < size; i++) {\r\n        array[i] = new object;\r\n    }\r\n    return array;\r\n}\r\n\r\n// 2D\r\nexport function generate2D(width, height) {\r\n    var array;\r\n    (array = []).length = width;\r\n    for (var x = 0; x < width; x++) {\r\n        (array[x] = []).length = height;\r\n        array[x].fill(0);\r\n    }\r\n    return array;\r\n}\r\n\r\nexport function generate2DFilled(width, height, object) {\r\n    var array;\r\n    (array = []).length = width;\r\n    for (var x = 0; x < width; x++) {\r\n        (array[x] = []).length = height;\r\n        for (var y = 0; y < height; y++) {\r\n            array[x][y] = object;\r\n        }\r\n    }\r\n    return array;\r\n}\r\n\r\nexport function generate2DFilledClasses(width, height, object) {\r\n    var array;\r\n    (array = []).length = width;\r\n    for (var x = 0; x < width; x++) {\r\n        (array[x] = []).length = height;\r\n        for (var y = 0; y < height; y++) {\r\n            array[x][y] = new object;\r\n        }\r\n    }\r\n    return array;\r\n}","import * as ArrayHelpers from \"../helpers/array\";\r\n\r\n/**\r\n * \r\n * @todo Add possibility to change Chunk dimenstions\r\n * @export\r\n * @class Chunk\r\n */\r\nexport default class Chunk {\r\n    /**\r\n     * Creates an instance of Chunk.\r\n     * @param {Number} x \r\n     * @param {Number} y \r\n     * @memberof Chunk\r\n     */\r\n    constructor(x, y) {\r\n        // 16x16x16\r\n        this.voxels = ArrayHelpers.generateFilled(4096, 1);\r\n        this.sprites = [];\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}","import Chunk from \"./chunk\";\r\nimport * as ArrayHelpers from \"../helpers/array\";\r\n\r\nexport default class World {\r\n    /**\r\n     * Creates an instance of World.\r\n     * @todo Rotation\r\n     * @todo Occulusion culling\r\n     * @todo Frustrum culling\r\n     * @todo Top-down view\r\n     * @memberof World\r\n     */\r\n    constructor() {\r\n        // Area of Interest, need to be recalculated after zooming\r\n        this.aoL = ArrayHelpers.generate2DFilledClasses(3, 3, Chunk);\r\n    }\r\n\r\n    /**\r\n     * Generate PIXI sprites from Area of Interest\r\n     * @memberof World\r\n     */\r\n    generateSprites() {\r\n        // AoL Chunk x\r\n        for (var x = 0; x < this.aoL.length; x++) {\r\n            // AoL Chunk y\r\n            for (var y = 0; y < this.aoL[x].length; y++) {\r\n                // Voxels in current chunk\r\n                for (var i = 0; i < this.aoL[x][y].voxels.length; i++) {\r\n                    // Get voxel block value\r\n                    var voxelValue = this.aoL[x][y].voxels[i];\r\n\r\n                    // Check if current voxel is not air\r\n                    if (voxelValue != 0) {\r\n                        // Calculate position from 1d index\r\n                        var voxelZ = i % 16;\r\n                        var voxelY = (Math.floor(i / 16)) % 16;\r\n                        var voxelX = Math.floor(i / (16 * 16));\r\n\r\n                        // Calculate sprite position\r\n                        var spriteX = ((voxelX - voxelY) + (x - y) * 16) * (32 / 2);\r\n                        var spriteY = ((voxelX + voxelY) + (x + y) * 16) * (32 / 4) - voxelZ * (32 / 2);\r\n                        \r\n                        // Create sprite from current block value\r\n                        var sprite = new PIXI.Sprite(Pixometric.textures[Pixometric.textureLookup[voxelValue - 1]]);\r\n\r\n                        // Add reference to current chunk for culling and unloading\r\n                        this.aoL[x][y].sprites[i] = sprite;\r\n\r\n                        // Set calculated values as position\r\n                        sprite.x = spriteX;\r\n                        sprite.y = spriteY;\r\n\r\n                        // Add sprite to the stage\r\n                        Pixometric.stage.addChild(sprite);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n} ","import Pixometric from \"./core/core\";\r\nimport World from \"./world/world\";\r\n\r\nPixometric.World = World;\r\n\r\nglobal.Pixometric = Pixometric;"],"sourceRoot":"."}