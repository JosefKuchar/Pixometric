{"version":3,"sources":["../../../AppData/Roaming/npm/node_modules/pixify/node_modules/browser-pack/_prelude.js","src/core/config.js","src/core/core.js","src/helpers/array.js","src/world/chunk.js","src/world/manipulation/generate-sprites.js","src/world/manipulation/occulusion-culling.js","src/world/manipulation/rotate.js","src/world/world.js","src/index.js"],"names":[],"mappings":"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","file":"pixometric.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var config = {\r\n    CHUNK: {\r\n        SIZE: 16,\r\n        HEIGHT: 16\r\n    },\r\n    SPRITE: {\r\n        SIZE: 32\r\n    }\r\n}\r\n\r\nexport default config; ","import World from \"../world/world\";\r\n\r\nexport default class Pixometric {\r\n    constructor(stage, world, textures, textureLookup) {\r\n        this.world = world;\r\n\r\n        // Make this global for easy access\r\n        Pixometric.stage = stage;\r\n        Pixometric.textures = textures;\r\n        Pixometric.textureLookup = textureLookup;\r\n    }\r\n}","// Optimalized filling methods\r\n// 1D\r\n\r\nexport function generate(size) {\r\n    var array;\r\n    (array = []).length = size;\r\n    return array.fill(0);\r\n}\r\n\r\nexport function generateFilled(size, object) {\r\n    var array;\r\n    (array = []).length = size;\r\n    for (var i = 0; i < size; i++) {\r\n        array[i] = object;\r\n    }\r\n    return array\r\n}\r\n\r\nexport function generateFilledClasses(size, object) {\r\n    var array;\r\n    (array = []).length = size;\r\n    for (var i = 0; i < size; i++) {\r\n        array[i] = new object;\r\n    }\r\n    return array;\r\n}\r\n\r\n// 2D\r\nexport function generate2D(width, height) {\r\n    var array;\r\n    (array = []).length = width;\r\n    for (var x = 0; x < width; x++) {\r\n        (array[x] = []).length = height;\r\n        array[x].fill(0);\r\n    }\r\n    return array;\r\n}\r\n\r\nexport function generate2DFilled(width, height, object) {\r\n    var array;\r\n    (array = []).length = width;\r\n    for (var x = 0; x < width; x++) {\r\n        (array[x] = []).length = height;\r\n        for (var y = 0; y < height; y++) {\r\n            array[x][y] = object;\r\n        }\r\n    }\r\n    return array;\r\n}\r\n\r\nexport function generate2DFilledClasses(width, height, object) {\r\n    var array;\r\n    (array = []).length = width;\r\n    for (var x = 0; x < width; x++) {\r\n        (array[x] = []).length = height;\r\n        for (var y = 0; y < height; y++) {\r\n            array[x][y] = new object;\r\n        }\r\n    }\r\n    return array;\r\n}","import * as ArrayHelpers from \"../helpers/array\";\r\n\r\n/**\r\n * Segment of World\r\n * @export\r\n * @class Chunk\r\n */\r\nexport default class Chunk {\r\n    /**\r\n     * Creates an instance of Chunk.\r\n     * @param {Number} x \r\n     * @param {Number} y \r\n     * @memberof Chunk\r\n     */\r\n    constructor(x, y) {\r\n        this.voxels = ArrayHelpers.generateFilled(Pixometric.config.CHUNK.SIZE * Pixometric.config.CHUNK.SIZE * Pixometric.config.CHUNK.HEIGHT, 1);\r\n        this.x = x;\r\n        this.y = y;\r\n    }   \r\n}","/**\r\n * Generate PIXI sprites from Area of Interest\r\n * \r\n * @export\r\n * @param {Chunk[][]} aoL \r\n * @param {Number} rotation \r\n */\r\nexport default function generateSprites(aoL, rotation) {\r\n    // AoL Chunk x\r\n    for (var x = 0; x < aoL.length; x++) {\r\n        // AoL Chunk y\r\n        for (var y = 0; y < aoL[0].length; y++) {\r\n            // Calculate rotated real coordinates, without specific function for performance\r\n            // Thanks to tulevik.EU (http://www.indiedb.com/games/office-management-101/features/rotating-a-25d-isometric-map)\r\n            switch (rotation) {\r\n                case 0:\r\n                    var chunkX = x;\r\n                    var chunkY = y;\r\n                    break;\r\n                case 1:\r\n                    var chunkX = aoL.length - y - 1;\r\n                    var chunkY = x;\r\n                    break;\r\n                case 2:\r\n                    var chunkX = aoL.length - x - 1;\r\n                    var chunkY = aoL[0].length - y - 1;\r\n                    break;\r\n                case 3:\r\n                    var chunkX = y;\r\n                    var chunkY = aoL[0].length - x - 1;\r\n            }\r\n            // Create container for chunk\r\n            var chunkContainer = new PIXI.Container();\r\n\r\n            // Add container to scene\r\n            Pixometric.stage.addChild(chunkContainer);\r\n\r\n            // Add reference to current chunk\r\n            aoL[chunkX][chunkY].container = chunkContainer;\r\n\r\n            // Voxels in current chunk\r\n            for (var i = 0; i < aoL[chunkX][chunkY].voxels.length; i++) {\r\n                // Calculate position from 1d index\r\n                var voxelZ = i % Pixometric.config.CHUNK.SIZE;\r\n                var voxelY = (Math.floor(i / Pixometric.config.CHUNK.SIZE)) % Pixometric.config.CHUNK.SIZE;\r\n                var voxelX = Math.floor(i / (Pixometric.config.CHUNK.SIZE * Pixometric.config.CHUNK.SIZE));\r\n\r\n                // Calculate rotated real voxel coordinates\r\n                // TODO: Optimize this \r\n                switch (rotation) {\r\n                    case 0:\r\n                        var tmpX = voxelX;\r\n                        var tmpY = voxelY;\r\n                        break;\r\n                    case 1:\r\n                        var tmpX = Pixometric.config.CHUNK.SIZE - voxelY - 1;\r\n                        var tmpY = voxelX;\r\n                        break;\r\n                    case 2:\r\n                        var tmpX = Pixometric.config.CHUNK.SIZE - voxelX - 1;\r\n                        var tmpY = Pixometric.config.CHUNK.SIZE - voxelY - 1;\r\n                        break;\r\n                    case 3:\r\n                        var tmpX = voxelY;\r\n                        var tmpY = Pixometric.config.CHUNK.SIZE - voxelX - 1;\r\n                }\r\n\r\n                var voxelIndex = voxelZ + tmpY * Pixometric.config.CHUNK.SIZE + tmpX * Pixometric.config.CHUNK.SIZE * Pixometric.config.CHUNK.SIZE;\r\n\r\n                // Get voxel block value\r\n                var voxelValue = aoL[chunkX][chunkY].voxels[voxelIndex];\r\n\r\n                // Check if current voxel is not air\r\n                if (voxelValue != 0) {\r\n                    // Calculate sprite position\r\n                    // Thanks Clint Bellanger (http://clintbellanger.net/articles/isometric_math/)\r\n                    var spriteX = ((voxelX - voxelY) + (x - y) * Pixometric.config.CHUNK.SIZE) * (Pixometric.config.SPRITE.SIZE / 2);\r\n                    var spriteY = ((voxelX + voxelY) + (x + y) * Pixometric.config.CHUNK.SIZE) * (Pixometric.config.SPRITE.SIZE / 4) - voxelZ * (Pixometric.config.SPRITE.SIZE / 2);\r\n\r\n                    // Create sprite from current block value\r\n                    var sprite = new PIXI.Sprite(Pixometric.textures[Pixometric.textureLookup[voxelValue - 1]]);\r\n\r\n                    // Set calculated values as position\r\n                    sprite.x = spriteX;\r\n                    sprite.y = spriteY;\r\n\r\n                    // Add sprite to the container\r\n                    chunkContainer.addChild(sprite);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","\r\n/**\r\n * Cull none visible voxels (behind each other)\r\n * \r\n * @export\r\n * @param {Chunk[][]} aoL \r\n */\r\nexport default function occlusionCulling(aoL) {\r\n    // Check \"top\"\r\n    for (var chunkX = 0; chunkX < aoL.length; chunkX++) {\r\n        for (var chunkY = 0; chunkY < aoL[0].length; chunkY++) {\r\n            for (var x = 0; x < Pixometric.config.CHUNK.SIZE; x++) {\r\n                for (var y = 0; y < Pixometric.config.CHUNK.SIZE; y++) {\r\n                    cull(aoL, chunkX, chunkY, x, y, Pixometric.config.CHUNK.HEIGHT - 1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Check \"left\"\r\n    for (var chunkX = 0; chunkX < aoL.length; chunkX++) {\r\n        for (var x = 0; x < Pixometric.config.CHUNK.SIZE; x++) {\r\n            for (var z = 0; z < Pixometric.config.CHUNK.HEIGHT - 1; z++) {\r\n                cull(aoL, chunkX, aoL[0].length - 1, x, Pixometric.config.CHUNK.SIZE, z);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Check \"right\"\r\n    for (var chunkY = 0; chunkY < aoL[0].length; chunkY++) {\r\n        for (var y = 0; y < Pixometric.config.CHUNK.SIZE; y++) {\r\n            for (var z = 0; z < Pixometric.config.CHUNK.HEIGHT - 1; z++) {\r\n                cull(aoL, aoL.length - 1, chunkY, Pixometric.config.CHUNK.SIZE - 1, y, z);\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Occlusion culling helper\r\n * \r\n * @param {Chunk[][]} aoL\r\n * @param {Number} chunkX \r\n * @param {Number} chunkY \r\n * @param {Number} x \r\n * @param {Number} y \r\n * @param {Number} z \r\n */\r\nfunction cull(aoL, chunkX, chunkY, x, y, z) {\r\n    var found = false;\r\n\r\n    while (true) {\r\n        if (z < 0) {\r\n            break;\r\n        }\r\n\r\n        if (y < 0) {\r\n            if (chunkY - 1 < 0) {\r\n                break;\r\n            } else {\r\n                chunkY--;\r\n                y = Pixometric.config.CHUNK.SIZE - 1;\r\n            }\r\n        }\r\n\r\n        if (x < 0) {\r\n            if (chunkX - 1 < 0) {\r\n                break;\r\n            } else {\r\n                chunkX--;\r\n                x = Pixometric.config.CHUNK.SIZE - 1;\r\n            }\r\n        }\r\n\r\n        // Calculate 1D index\r\n        var index = z + y * Pixometric.config.CHUNK.SIZE + x * Pixometric.config.CHUNK.SIZE * Pixometric.config.CHUNK.SIZE;\r\n\r\n        if (aoL[chunkX][chunkY].voxels[index] != 0) {\r\n            if (found) {\r\n                if (aoL[chunkX][chunkY].sprites[index]) {\r\n                    aoL[chunkX][chunkY].sprites[index].visible = false;\r\n                }\r\n            } else {\r\n                found = true;\r\n            }\r\n        }\r\n\r\n        x--;\r\n        y--;\r\n        z--;\r\n    }\r\n}","import generateSprites from \"./generate-sprites\";\r\n\r\n/**\r\n * Rotate world\r\n * \r\n * @export\r\n * @param {Chunk[][]} aoL \r\n * @param {Number} rotation \r\n */\r\nexport default function rotate(aoL, rotation) {\r\n    for (var x = 0; x < aoL.length; x++) {\r\n        for (var y = 0; y < aoL[0].length; y++) {\r\n            for (var i = 0; i < aoL[0][0].sprites.length; i++) {\r\n                if (aoL[x][y].sprites[i]) {\r\n                    aoL[x][y].sprites[i].destroy();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    generateSprites(aoL, rotation);\r\n}","import Chunk from \"./chunk\";\r\nimport occlusionCulling from \"./manipulation/occulusion-culling\";\r\nimport generateSprites from \"./manipulation/generate-sprites\";\r\nimport rotate from \"./manipulation/rotate\";\r\nimport * as ArrayHelpers from \"../helpers/array\";\r\n\r\nexport default class World {\r\n    /**\r\n     * Creates an instance of World.\r\n     * @todo Add option to disable rotation for better performance\r\n     * @todo Frustrum culling\r\n     * @todo Top-down view\r\n     * @param {Function} loadChunkCB Callback loading function\r\n     * @memberof World\r\n     */\r\n    constructor(loadChunkCB) {\r\n        // Area of Interest, size need to be recalculated after zooming\r\n        this.aoL = ArrayHelpers.generate2D(3, 3);\r\n\r\n        // Rotation of world, 0 - 3\r\n        this.rotation = 3;\r\n\r\n        this.offset = {\r\n            x: 0,\r\n            y: 0\r\n        };\r\n\r\n        this.loadChunkCB = loadChunkCB;\r\n\r\n        for (var x = 0; x < this.aoL.length; x++) {\r\n            for (var y = 0; y < this.aoL[0].length; y++) {\r\n                this.aoL[x][y] = loadChunkCB(x, y);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Occlusion cullling algorithm\r\n     * \r\n     * @memberof World\r\n     */\r\n    occlusionCulling() {\r\n        occlusionCulling(this.aoL);\r\n    }\r\n\r\n    /**\r\n     * Generate PIXI sprites from Area of Interest\r\n     * \r\n     * @memberof World\r\n     */\r\n    generateSprites() {\r\n        generateSprites(this.aoL, this.rotation);\r\n    }\r\n\r\n    /**\r\n     * Rotate world\r\n     * \r\n     * @param {Number} rotation \r\n     * @memberof World\r\n     */\r\n    rotate(rotation) {\r\n        this.rotation = rotation;\r\n        rotate(this.aoL, this.rotation);\r\n    }\r\n}","import Pixometric from \"./core/core\";\r\nimport config from \"./core/config\";\r\nimport World from \"./world/world\";\r\nimport Chunk from \"./world/chunk\";\r\n\r\n// Add global config to Pixometric variable\r\nPixometric.config = config;\r\n\r\nPixometric.World = World;\r\nPixometric.Chunk = Chunk;\r\n\r\nglobal.Pixometric = Pixometric;"],"sourceRoot":"."}