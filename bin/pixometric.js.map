{"version":3,"sources":["../../../AppData/Roaming/npm/node_modules/pixify/node_modules/browser-pack/_prelude.js","src/core/config.js","src/core/core.js","src/helpers/array.js","src/world/chunk.js","src/world/world.js","src/index.js"],"names":[],"mappings":"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","file":"pixometric.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var config = {\r\n    CHUNK: {\r\n        SIZE: 16,\r\n        HEIGHT: 16\r\n    }\r\n}\r\n\r\nexport default config; ","import World from \"../world/world\";\r\n\r\nexport default class Pixometric {\r\n    constructor(stage, world, textures, textureLookup) {\r\n        this.world = world;\r\n\r\n        // Make this global for easy access \r\n        Pixometric.stage = stage;\r\n        Pixometric.textures = textures;\r\n        Pixometric.textureLookup = textureLookup;\r\n    }\r\n}","// Optimalized filling methods\r\n// 1D\r\n\r\nexport function generate(size) {\r\n    var array;\r\n    (array = []).length = size;\r\n    return array.fill(0);\r\n}\r\n\r\nexport function generateFilled(size, object) {\r\n    var array;\r\n    (array = []).length = size;\r\n    for (var i = 0; i < size; i++) {\r\n        array[i] = object;\r\n    }\r\n    return array\r\n}\r\n\r\nexport function generateFilledClasses(size, object) {\r\n    var array;\r\n    (array = []).length = size;\r\n    for (var i = 0; i < size; i++) {\r\n        array[i] = new object;\r\n    }\r\n    return array;\r\n}\r\n\r\n// 2D\r\nexport function generate2D(width, height) {\r\n    var array;\r\n    (array = []).length = width;\r\n    for (var x = 0; x < width; x++) {\r\n        (array[x] = []).length = height;\r\n        array[x].fill(0);\r\n    }\r\n    return array;\r\n}\r\n\r\nexport function generate2DFilled(width, height, object) {\r\n    var array;\r\n    (array = []).length = width;\r\n    for (var x = 0; x < width; x++) {\r\n        (array[x] = []).length = height;\r\n        for (var y = 0; y < height; y++) {\r\n            array[x][y] = object;\r\n        }\r\n    }\r\n    return array;\r\n}\r\n\r\nexport function generate2DFilledClasses(width, height, object) {\r\n    var array;\r\n    (array = []).length = width;\r\n    for (var x = 0; x < width; x++) {\r\n        (array[x] = []).length = height;\r\n        for (var y = 0; y < height; y++) {\r\n            array[x][y] = new object;\r\n        }\r\n    }\r\n    return array;\r\n}","import * as ArrayHelpers from \"../helpers/array\";\r\n\r\n/**\r\n * \r\n * @export\r\n * @class Chunk\r\n */\r\nexport default class Chunk {\r\n    /**\r\n     * Creates an instance of Chunk.\r\n     * @param {Number} x \r\n     * @param {Number} y \r\n     * @memberof Chunk\r\n     */\r\n    constructor(x, y) {\r\n        this.voxels = ArrayHelpers.generateFilled(Pixometric.config.CHUNK.SIZE * Pixometric.config.CHUNK.SIZE * Pixometric.config.CHUNK.HEIGHT, 1);\r\n        this.sprites = [];\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}","import Chunk from \"./chunk\";\r\nimport * as ArrayHelpers from \"../helpers/array\";\r\n\r\nexport default class World {\r\n    /**\r\n     * Creates an instance of World.\r\n     * @todo Add option to disable rotation for better performance\r\n     * @todo Frustrum culling\r\n     * @todo Top-down view\r\n     * @memberof World\r\n     */\r\n    constructor() {\r\n        // Area of Interest, need to be recalculated after zooming\r\n        this.aoL = ArrayHelpers.generate2DFilledClasses(3, 3, Chunk);\r\n        \r\n        // 0 - 3\r\n        this.rotation = 3;\r\n    }\r\n\r\n    /**\r\n     * Generate PIXI sprites from Area of Interest\r\n     * @memberof World\r\n     */\r\n    generateSprites() {\r\n        // AoL Chunk x\r\n        for (var x = 0; x < this.aoL.length; x++) {\r\n            // AoL Chunk y\r\n            for (var y = 0; y < this.aoL[0].length; y++) {\r\n                // Calculate rotated real coordinates, without specific function for performance\r\n                // Thanks to tulevik.EU (http://www.indiedb.com/games/office-management-101/features/rotating-a-25d-isometric-map)\r\n                switch (this.rotation) {\r\n                    case 0:\r\n                        var chunkX = x;\r\n                        var chunkY = y;\r\n                        break;\r\n                    case 1:\r\n                        var chunkX = this.aoL.length - y - 1;\r\n                        var chunkY = x;\r\n                        break;\r\n                    case 2:\r\n                        var chunkX = this.aoL.length - x - 1;\r\n                        var chunkY = this.aoL[0].length - y - 1;\r\n                        break;\r\n                    case 3:\r\n                        var chunkX = y;\r\n                        var chunkY = this.aoL[0].length - x - 1;\r\n                }\r\n\r\n                // Voxels in current chunk\r\n                for (var i = 0; i < this.aoL[chunkX][chunkY].voxels.length; i++) {\r\n                    // Calculate position from 1d index\r\n                    var voxelZ = i % Pixometric.config.CHUNK.SIZE;\r\n                    var voxelY = (Math.floor(i / Pixometric.config.CHUNK.SIZE)) % Pixometric.config.CHUNK.SIZE;\r\n                    var voxelX = Math.floor(i / (Pixometric.config.CHUNK.SIZE * Pixometric.config.CHUNK.SIZE));\r\n\r\n                    // Calculate rotated real voxel coordinates\r\n                    // TODO: Optimize this \r\n                    switch (this.rotation) {\r\n                        case 0:\r\n                            var tmpX = voxelX;\r\n                            var tmpY = voxelY;\r\n                            break;\r\n                        case 1:\r\n                            var tmpX = Pixometric.config.CHUNK.SIZE - voxelY - 1;\r\n                            var tmpY = voxelX;\r\n                            break;\r\n                        case 2:\r\n                            var tmpX = Pixometric.config.CHUNK.SIZE - voxelX - 1;\r\n                            var tmpY = Pixometric.config.CHUNK.SIZE - voxelY - 1;\r\n                            break;\r\n                        case 3:\r\n                            var tmpX = voxelY;\r\n                            var tmpY = Pixometric.config.CHUNK.SIZE - voxelX - 1;\r\n                    }\r\n\r\n                    var voxelIndex = voxelZ + tmpY * Pixometric.config.CHUNK.SIZE + tmpX * Pixometric.config.CHUNK.SIZE * Pixometric.config.CHUNK.SIZE;\r\n\r\n                    // Get voxel block value\r\n                    var voxelValue = this.aoL[chunkX][chunkY].voxels[voxelIndex];\r\n\r\n                    // Check if current voxel is not air\r\n                    if (voxelValue != 0) {\r\n                        // Calculate sprite position\r\n                        var spriteX = ((voxelX - voxelY) + (x - y) * Pixometric.config.CHUNK.SIZE) * (32 / 2);\r\n                        var spriteY = ((voxelX + voxelY) + (x + y) * Pixometric.config.CHUNK.SIZE) * (32 / 4) - voxelZ * (32 / 2);\r\n                        \r\n                        // Create sprite from current block value\r\n                        var sprite = new PIXI.Sprite(Pixometric.textures[Pixometric.textureLookup[voxelValue - 1]]);\r\n\r\n                        // Add reference to current chunk for culling and unloading\r\n                        this.aoL[x][y].sprites[i] = sprite;\r\n\r\n                        // Set calculated values as position\r\n                        sprite.x = spriteX;\r\n                        sprite.y = spriteY;\r\n\r\n                        // Add sprite to the stage\r\n                        Pixometric.stage.addChild(sprite);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Rotate world\r\n     * @todo Optimize this\r\n     * @param {Number} rotation \r\n     * @memberof World\r\n     */\r\n    rotate(rotation) {\r\n        this.rotation = rotation;\r\n        for (var x = 0; x < this.aoL.length; x++) {\r\n            for (var y = 0; y < this.aoL[0].length; y++) {\r\n                for (var i = 0; i < this.aoL[0][0].sprites.length; i++) {\r\n                    if (this.aoL[x][y].sprites[i]) {\r\n                        this.aoL[x][y].sprites[i].destroy();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.generateSprites();\r\n    }\r\n\r\n    /**\r\n     * Cull none visible voxels (behind each other)\r\n     * \r\n     * @memberof World\r\n     */\r\n    occlusionCulling() {\r\n        // Check \"top\"\r\n        for (var chunkX = 0; chunkX < this.aoL.length; chunkX++) {\r\n            for (var chunkY = 0; chunkY < this.aoL[0].length; chunkY++) {\r\n                for (var x = 0; x < Pixometric.config.CHUNK.SIZE; x++) {\r\n                    for (var y = 0; y < Pixometric.config.CHUNK.SIZE; y++) {\r\n                        this.cull(chunkX, chunkY, x, y, Pixometric.config.CHUNK.HEIGHT - 1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Check \"left\"\r\n        for (var chunkX = 0; chunkX < this.aoL.length; chunkX++) {\r\n            for (var x = 0; x < Pixometric.config.CHUNK.SIZE; x++) {\r\n                for (var z = 0; z < Pixometric.config.CHUNK.HEIGHT - 1; z++) {\r\n                    this.cull(chunkX, this.aoL[0].length - 1, x, Pixometric.config.CHUNK.SIZE, z);\r\n                }\r\n            } \r\n        }\r\n        \r\n        // Check \"right\"\r\n        for (var chunkY = 0; chunkY < this.aoL[0].length; chunkY++) {\r\n            for (var y = 0; y < Pixometric.config.CHUNK.SIZE; y++) {\r\n                for (var z = 0; z < Pixometric.config.CHUNK.HEIGHT - 1; z++) {\r\n                    this.cull(this.aoL.length - 1, chunkY, Pixometric.config.CHUNK.SIZE - 1, y, z);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    cull(chunkX, chunkY, x, y, z) {\r\n        var found = false;\r\n\r\n        while(true) {\r\n            if (z < 0) {\r\n                break;\r\n            }\r\n\r\n            if (y < 0) {\r\n                if (chunkY - 1 < 0) {\r\n                    break;\r\n                } else {\r\n                    chunkY--;\r\n                    y = Pixometric.config.CHUNK.SIZE - 1;\r\n                }\r\n            }\r\n\r\n            if (x < 0) {\r\n                if (chunkX - 1 < 0) {\r\n                    break;\r\n                } else {\r\n                    chunkX--;\r\n                    x = Pixometric.config.CHUNK.SIZE - 1;\r\n                }\r\n            }\r\n\r\n            // Calculate 1D index\r\n            var index = z + y * Pixometric.config.CHUNK.SIZE + x * Pixometric.config.CHUNK.SIZE * Pixometric.config.CHUNK.SIZE;\r\n\r\n            if (this.aoL[chunkX][chunkY].voxels[index] != 0) {\r\n                if (found) {\r\n                    if (this.aoL[chunkX][chunkY].sprites[index]) {\r\n                        this.aoL[chunkX][chunkY].sprites[index].visible = false;\r\n                    }\r\n                } else {\r\n                    found = true;\r\n                }\r\n            }\r\n\r\n            x--;\r\n            y--;\r\n            z--;\r\n        }\r\n    }\r\n} ","import Pixometric from \"./core/core\";\r\nimport config from \"./core/config\";\r\nimport World from \"./world/world\";\r\n\r\n// Add global config to Pixometric variable\r\nPixometric.config = config;\r\nPixometric.World = World;\r\n\r\nglobal.Pixometric = Pixometric;"],"sourceRoot":"."}